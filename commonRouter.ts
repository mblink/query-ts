/**
 * Generated by bondlink.routing.JavaScriptReverseRouter
 *
 * To add routes to this file, you must first add them to the action associated
 * with the URL: /common/typescript-routes.
 *
 * To generate routes: curl --insecure -o /src/bondlink/web/common/assets/scripts/commonRouter.ts https://dev.bondlink.org/common/typescript-routes
 *
 */

import {Router} from "./router";

export class CommonRouter extends Router {

  static readonly common = {
    "FilesController": {
      "viewUrl":  function(title0:string,url1:string) { return Router._wA({method: "GET", url: "/" + "files/url" + Router._qS([(function(k:string,v:string) {return encodeURIComponent(k)+'='+encodeURIComponent(v)})("title", title0), (function(k:string,v:string) {return encodeURIComponent(k)+'='+encodeURIComponent(v)})("url", url1)])}) }
      },
    "UserController": {
      "checkSession":  function() { return Router._wA({method: "GET", url: "/" + "check-session"}) },
      "enterPreview":  function() { return Router._wA({method: "GET", url: "/" + "preview/on"}) },
      "exitPreview":  function() { return Router._wA({method: "GET", url: "/" + "preview/off"}) },
      "expireSession":  function() { return Router._wA({method: "GET", url: "/" + "expire-session"}) },
      "login":  function(redirect0:string) { if (true) { return Router._wA({method: "GET", url: "/" + "login" + Router._qS([(redirect0 == null ? null :  (function(k:string,v:string){return v!=null?(function(k:string,v:string) {return encodeURIComponent(k)+'='+encodeURIComponent(v)})(k,v): ''})("redirect", redirect0))])}) } },
      "logout":  function() { return Router._wA({method: "POST", url: "/" + "logout"}) },
      "passwordResetPost":  function() { return Router._wA({method: "POST", url: "/" + "password-reset/post"}) },
      "refreshSession":  function() { return Router._wA({method: "POST", url: "/" + "refresh-session"}) },
      "xdLoginCheck":  function(nonce0:string,key1:string) { return Router._wA({method: "GET", url: "/" + "xdl-check/" + encodeURIComponent((function(k:string,v:string) {return v})("nonce", nonce0)) + "/" + encodeURIComponent((function(k:string,v:string) {return v})("key", key1))}) },
      "xdLoginIframe":  function() { return Router._wA({method: "GET", url: "/" + "xdl-iframe"}) },
      "xdLoginSync":  function(token0:string,key1:string) { return Router._wA({method: "GET", url: "/" + "xdl-sync/" + encodeURIComponent((function(k:string,v:string) {return v})("token", token0)) + "/" + encodeURIComponent((function(k:string,v:string) {return v})("key", key1))}) },
      "xdLogout":  function(token0:string,key1:string) { return Router._wA({method: "GET", url: "/" + "xdl-out/" + encodeURIComponent((function(k:string,v:string) {return v})("token", token0)) + "/" + encodeURIComponent((function(k:string,v:string) {return v})("key", key1))}) }
      }
    };

  static readonly issuerportal = {
    "UploadController": {
      "postPublishImage":  function() { return Router._wA({method: "POST", url: "/" + "issuer-portal/upload/publish-image"}) }
      }
    };

  static readonly issuersites = {
    "InvestorsController": {
      "login":  function() { if (true) { return Router._wA({method: "GET", url: "/" + "investors/login"}) } }
      }
    };
}
